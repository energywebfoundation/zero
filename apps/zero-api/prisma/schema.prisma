// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  firstName         String
  lastName          String
  roles             UserRole[]
  drafts            Draft[]
  facilities        Facility[]
  password          String
  emailConfirmed    Boolean             @default(false)
  emailConfirmation EmailConfirmation[]
  passwordResets    PasswordReset[]
  files             File[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model File {
  id                    String    @id @default(uuid())
  filename              String
  mimetype              String
  owner                 User      @relation(fields: [ownerId], references: [id])
  ownerId               Int
  fileType              FileType?
  meta                  Json?
  uploadedAt            DateTime
  processingCompletedAt DateTime?
  imageOfFacility       Facility? @relation("imageOfFacility", fields: [imageOfFacilityId], references: [id])
  imageOfFacilityId     String?
  documentOfFacility    Facility? @relation("documentOfFacility", fields: [documentOfFacilityId], references: [id])
  documentOfFacilityId  String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Draft {
  id        Int       @id @default(autoincrement())
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  data      Json
  draftType DraftType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PasswordReset {
  id        String   @id @default(uuid())
  expiresAt DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedAt    DateTime?
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int
}

model EmailConfirmation {
  id          String    @id @default(uuid())
  userId      Int
  expiresAt   DateTime
  valid       Boolean   @default(true)
  confirmedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Facility {
  id                      String                            @id @default(uuid())
  companyName             String
  name                    String
  facilityId              String
  registry                DeviceRegistryEnum[]
  registryId              String
  energySource            RenevableEnergySourceEnum
  installedCapacity       Int
  certifiedEnergy         Int?
  energyToBeCertified     Int?
  commercialOperationDate DateTime?
  financialSupport        FacilityFinancialSupportTypeEnum?
  country                 String
  region                  String?
  latitude                Float?
  longitude               Float?
  gridOperator            String?
  story                   String?
  impactStory             String?
  owner                   User?                             @relation(fields: [ownerId], references: [id])
  ownerId                 Int
  ownershipType           DeviceOwnershipEnum

  products  Product[]
  images    File[]    @relation("imageOfFacility")
  documents File[]    @relation("documentOfFacility")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(facilityId)
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  Facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeviceRegistryEnum {
  REC
  I_REC
  TIGR
  ALL
}

enum RenevableEnergySourceEnum {
  SOLAR
  WIND
  HYDRO
  BIOMASS
  GEOTHERMAL
}

enum FacilityFinancialSupportTypeEnum {
  GOVERNMENT_SUBSIDIES
  TAX_REBATES
  OTHER
}

enum DeviceOwnershipEnum {
  OWNER
  I_REC_MANAGER
  BROKER
}

enum UserRole {
  seller
  buyer
  admin
}

enum DraftType {
  facility
}

enum FileType {
  facility
  sustainability
  company
  product
}
