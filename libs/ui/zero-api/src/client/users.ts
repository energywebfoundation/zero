/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  UserEntity,
  CreateUserDto,
  UpdateUserDto
} from './energyWebZeroAPI.schemas'
import usersControllerCreateMutator from '../response-type'
import usersControllerFindOneMutator from '../response-type'
import usersControllerUpdateMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const usersControllerCreate = <TData = UserEntity>(
    createUserDto: CreateUserDto,
 options?: SecondParameter<typeof usersControllerCreateMutator>) => {
      return usersControllerCreateMutator<TData>(
      {url: `/api/users`, method: 'post',
      data: createUserDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerCreate = <TData = AsyncReturnType<typeof usersControllerCreate,UserEntity>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CreateUserDto}, TContext>, request?: SecondParameter<typeof usersControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: CreateUserDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerFindOne = <TData = UserEntity>(
    id: string,
 options?: SecondParameter<typeof usersControllerFindOneMutator>) => {
      return usersControllerFindOneMutator<TData>(
      {url: `/api/users/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersControllerFindOneQueryKey = (id: string,) => [`/api/users/${id}`]

    
export const useUsersControllerFindOne = <TQueryFnData = AsyncReturnType<typeof usersControllerFindOne, UserEntity>, TError = unknown, TData = TQueryFnData>(
 id: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof usersControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => usersControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const usersControllerUpdate = <TData = UserEntity>(
    id: string,
    updateUserDto: UpdateUserDto,
 options?: SecondParameter<typeof usersControllerUpdateMutator>) => {
      return usersControllerUpdateMutator<TData>(
      {url: `/api/users/${id}`, method: 'patch',
      data: updateUserDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerUpdate = <TData = AsyncReturnType<typeof usersControllerUpdate,UserEntity>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string;data: UpdateUserDto}, TContext>, request?: SecondParameter<typeof usersControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string;data: UpdateUserDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  usersControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    