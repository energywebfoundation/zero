/*
 * Generated by orval v5.4.7 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  UserDto,
  CreateUserDto,
  UpdateUserDto,
  PasswordChangeDto,
  PasswordResetInitDto,
  PasswordResetDto,
  CreateEmailConfirmationDto,
  UpdateEmailConfirmationDto,
  DraftDto,
  CreateDraftDto,
  UpdateDraftDto,
  FileMetadataDto
} from './energyWebZeroAPI.schemas'
import usersControllerGetAllMutator from '../response-type'
import usersControllerCreateMutator from '../response-type'
import usersControllerMeMutator from '../response-type'
import usersControllerFindOneMutator from '../response-type'
import usersControllerUpdateMutator from '../response-type'
import usersControllerPasswordChangeMutator from '../response-type'
import usersControllerResetPasswordInitializeMutator from '../response-type'
import usersControllerResetPasswordMutator from '../response-type'
import usersControllerCreateEmailConfirmationMutator from '../response-type'
import usersControllerConfirmEmailMutator from '../response-type'
import usersOwnDraftsControllerFindAllMutator from '../response-type'
import usersOwnDraftsControllerCreateMutator from '../response-type'
import usersOwnDraftsControllerFindOneMutator from '../response-type'
import usersOwnDraftsControllerUpdateMutator from '../response-type'
import usersOwnDraftsControllerRemoveMutator from '../response-type'
import usersDraftsControllerFindAllMutator from '../response-type'
import usersDraftsControllerCreateMutator from '../response-type'
import usersDraftsControllerFindOneMutator from '../response-type'
import usersDraftsControllerUpdateMutator from '../response-type'
import usersDraftsControllerRemoveMutator from '../response-type'
import usersOwnFilesControllerGetUserFilesMetadataMutator from '../response-type'
import usersFilesControllerGetUserFilesMetadataMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const usersControllerGetAll = <TData = UserDto[]>(
    
 options?: SecondParameter<typeof usersControllerGetAllMutator>) => {
      return usersControllerGetAllMutator<TData>(
      {url: `/api/users`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersControllerGetAllQueryKey = () => [`/api/users`]

    
export const useUsersControllerGetAll = <TQueryFnData = UserDto[], TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersControllerGetAll>, TError, TData>, request?: SecondParameter<typeof usersControllerGetAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersControllerGetAllQueryKey();

  const query = useQuery<AsyncReturnType<typeof usersControllerGetAll>, TError, TData>(queryKey, () => usersControllerGetAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const usersControllerCreate = <TData = UserDto>(
    createUserDto: CreateUserDto,
 options?: SecondParameter<typeof usersControllerCreateMutator>) => {
      return usersControllerCreateMutator<TData>(
      {url: `/api/users`, method: 'post',
      data: createUserDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerCreate = <TData = UserDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerCreate>, TError,{data: CreateUserDto}, TContext>, request?: SecondParameter<typeof usersControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerCreate>, TError, {data: CreateUserDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerMe = <TData = UserDto>(
    
 options?: SecondParameter<typeof usersControllerMeMutator>) => {
      return usersControllerMeMutator<TData>(
      {url: `/api/users/me`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersControllerMeQueryKey = () => [`/api/users/me`]

    
export const useUsersControllerMe = <TQueryFnData = UserDto, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersControllerMe>, TError, TData>, request?: SecondParameter<typeof usersControllerMeMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersControllerMeQueryKey();

  const query = useQuery<AsyncReturnType<typeof usersControllerMe>, TError, TData>(queryKey, () => usersControllerMe<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const usersControllerFindOne = <TData = UserDto>(
    id: number,
 options?: SecondParameter<typeof usersControllerFindOneMutator>) => {
      return usersControllerFindOneMutator<TData>(
      {url: `/api/users/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersControllerFindOneQueryKey = (id: number,) => [`/api/users/${id}`]

    
export const useUsersControllerFindOne = <TQueryFnData = UserDto, TError = unknown, TData = TQueryFnData>(
 id: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersControllerFindOne>, TError, TData>, request?: SecondParameter<typeof usersControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  const query = useQuery<AsyncReturnType<typeof usersControllerFindOne>, TError, TData>(queryKey, () => usersControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const usersControllerUpdate = <TData = UserDto>(
    id: number,
    updateUserDto: UpdateUserDto,
 options?: SecondParameter<typeof usersControllerUpdateMutator>) => {
      return usersControllerUpdateMutator<TData>(
      {url: `/api/users/${id}`, method: 'patch',
      data: updateUserDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerUpdate = <TData = UserDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerUpdate>, TError,{id: number;data: UpdateUserDto}, TContext>, request?: SecondParameter<typeof usersControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerUpdate>, TError, {id: number;data: UpdateUserDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  usersControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerPasswordChange = <TData = UserDto>(
    id: number,
    passwordChangeDto: PasswordChangeDto,
 options?: SecondParameter<typeof usersControllerPasswordChangeMutator>) => {
      return usersControllerPasswordChangeMutator<TData>(
      {url: `/api/users/${id}/password`, method: 'put',
      data: passwordChangeDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerPasswordChange = <TData = UserDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerPasswordChange>, TError,{id: number;data: PasswordChangeDto}, TContext>, request?: SecondParameter<typeof usersControllerPasswordChangeMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerPasswordChange>, TError, {id: number;data: PasswordChangeDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  usersControllerPasswordChange<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerResetPasswordInitialize = <TData = unknown>(
    passwordResetInitDto: PasswordResetInitDto,
 options?: SecondParameter<typeof usersControllerResetPasswordInitializeMutator>) => {
      return usersControllerResetPasswordInitializeMutator<TData>(
      {url: `/api/users/password-reset-init`, method: 'post',
      data: passwordResetInitDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerResetPasswordInitialize = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerResetPasswordInitialize>, TError,{data: PasswordResetInitDto}, TContext>, request?: SecondParameter<typeof usersControllerResetPasswordInitializeMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerResetPasswordInitialize>, TError, {data: PasswordResetInitDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerResetPasswordInitialize<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerResetPassword = <TData = unknown>(
    passwordResetDto: PasswordResetDto,
 options?: SecondParameter<typeof usersControllerResetPasswordMutator>) => {
      return usersControllerResetPasswordMutator<TData>(
      {url: `/api/users/password-reset`, method: 'put',
      data: passwordResetDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerResetPassword = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerResetPassword>, TError,{data: PasswordResetDto}, TContext>, request?: SecondParameter<typeof usersControllerResetPasswordMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerResetPassword>, TError, {data: PasswordResetDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerResetPassword<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerCreateEmailConfirmation = <TData = unknown>(
    createEmailConfirmationDto: CreateEmailConfirmationDto,
 options?: SecondParameter<typeof usersControllerCreateEmailConfirmationMutator>) => {
      return usersControllerCreateEmailConfirmationMutator<TData>(
      {url: `/api/users/email-confirmation`, method: 'post',
      data: createEmailConfirmationDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerCreateEmailConfirmation = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerCreateEmailConfirmation>, TError,{data: CreateEmailConfirmationDto}, TContext>, request?: SecondParameter<typeof usersControllerCreateEmailConfirmationMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerCreateEmailConfirmation>, TError, {data: CreateEmailConfirmationDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerCreateEmailConfirmation<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersControllerConfirmEmail = <TData = unknown>(
    updateEmailConfirmationDto: UpdateEmailConfirmationDto,
 options?: SecondParameter<typeof usersControllerConfirmEmailMutator>) => {
      return usersControllerConfirmEmailMutator<TData>(
      {url: `/api/users/email-confirmation`, method: 'put',
      data: updateEmailConfirmationDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersControllerConfirmEmail = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersControllerConfirmEmail>, TError,{data: UpdateEmailConfirmationDto}, TContext>, request?: SecondParameter<typeof usersControllerConfirmEmailMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersControllerConfirmEmail>, TError, {data: UpdateEmailConfirmationDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersControllerConfirmEmail<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersOwnDraftsControllerFindAll = <TData = DraftDto[]>(
    
 options?: SecondParameter<typeof usersOwnDraftsControllerFindAllMutator>) => {
      return usersOwnDraftsControllerFindAllMutator<TData>(
      {url: `/api/users/me/drafts`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersOwnDraftsControllerFindAllQueryKey = () => [`/api/users/me/drafts`]

    
export const useUsersOwnDraftsControllerFindAll = <TQueryFnData = DraftDto[], TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersOwnDraftsControllerFindAll>, TError, TData>, request?: SecondParameter<typeof usersOwnDraftsControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersOwnDraftsControllerFindAllQueryKey();

  const query = useQuery<AsyncReturnType<typeof usersOwnDraftsControllerFindAll>, TError, TData>(queryKey, () => usersOwnDraftsControllerFindAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const usersOwnDraftsControllerCreate = <TData = DraftDto>(
    createDraftDto: CreateDraftDto,
 options?: SecondParameter<typeof usersOwnDraftsControllerCreateMutator>) => {
      return usersOwnDraftsControllerCreateMutator<TData>(
      {url: `/api/users/me/drafts`, method: 'post',
      data: createDraftDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersOwnDraftsControllerCreate = <TData = DraftDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersOwnDraftsControllerCreate>, TError,{data: CreateDraftDto}, TContext>, request?: SecondParameter<typeof usersOwnDraftsControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersOwnDraftsControllerCreate>, TError, {data: CreateDraftDto}, TContext>((props) => {
        const {data} = props || {};

        return  usersOwnDraftsControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const usersOwnDraftsControllerFindOne = <TData = DraftDto>(
    id: number,
 options?: SecondParameter<typeof usersOwnDraftsControllerFindOneMutator>) => {
      return usersOwnDraftsControllerFindOneMutator<TData>(
      {url: `/api/users/me/drafts/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersOwnDraftsControllerFindOneQueryKey = (id: number,) => [`/api/users/me/drafts/${id}`]

    
export const useUsersOwnDraftsControllerFindOne = <TQueryFnData = DraftDto, TError = unknown, TData = TQueryFnData>(
 id: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersOwnDraftsControllerFindOne>, TError, TData>, request?: SecondParameter<typeof usersOwnDraftsControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersOwnDraftsControllerFindOneQueryKey(id);

  const query = useQuery<AsyncReturnType<typeof usersOwnDraftsControllerFindOne>, TError, TData>(queryKey, () => usersOwnDraftsControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const usersOwnDraftsControllerUpdate = <TData = DraftDto>(
    id: number,
    updateDraftDto: UpdateDraftDto,
 options?: SecondParameter<typeof usersOwnDraftsControllerUpdateMutator>) => {
      return usersOwnDraftsControllerUpdateMutator<TData>(
      {url: `/api/users/me/drafts/${id}`, method: 'put',
      data: updateDraftDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersOwnDraftsControllerUpdate = <TData = DraftDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersOwnDraftsControllerUpdate>, TError,{id: number;data: UpdateDraftDto}, TContext>, request?: SecondParameter<typeof usersOwnDraftsControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersOwnDraftsControllerUpdate>, TError, {id: number;data: UpdateDraftDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  usersOwnDraftsControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const usersOwnDraftsControllerRemove = <TData = unknown>(
    id: number,
 options?: SecondParameter<typeof usersOwnDraftsControllerRemoveMutator>) => {
      return usersOwnDraftsControllerRemoveMutator<TData>(
      {url: `/api/users/me/drafts/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersOwnDraftsControllerRemove = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersOwnDraftsControllerRemove>, TError,{id: number}, TContext>, request?: SecondParameter<typeof usersOwnDraftsControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersOwnDraftsControllerRemove>, TError, {id: number}, TContext>((props) => {
        const {id} = props || {};

        return  usersOwnDraftsControllerRemove<TData>(id,requestOptions)
      }, mutationOptions)
    }
    export const usersDraftsControllerFindAll = <TData = DraftDto[]>(
    userId: number,
 options?: SecondParameter<typeof usersDraftsControllerFindAllMutator>) => {
      return usersDraftsControllerFindAllMutator<TData>(
      {url: `/api/users/${userId}/drafts`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersDraftsControllerFindAllQueryKey = (userId: number,) => [`/api/users/${userId}/drafts`]

    
export const useUsersDraftsControllerFindAll = <TQueryFnData = DraftDto[], TError = unknown, TData = TQueryFnData>(
 userId: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersDraftsControllerFindAll>, TError, TData>, request?: SecondParameter<typeof usersDraftsControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersDraftsControllerFindAllQueryKey(userId);

  const query = useQuery<AsyncReturnType<typeof usersDraftsControllerFindAll>, TError, TData>(queryKey, () => usersDraftsControllerFindAll<TQueryFnData>(userId, requestOptions), {enabled: !!(userId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const usersDraftsControllerCreate = <TData = DraftDto>(
    userId: number,
    createDraftDto: CreateDraftDto,
 options?: SecondParameter<typeof usersDraftsControllerCreateMutator>) => {
      return usersDraftsControllerCreateMutator<TData>(
      {url: `/api/users/${userId}/drafts`, method: 'post',
      data: createDraftDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersDraftsControllerCreate = <TData = DraftDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersDraftsControllerCreate>, TError,{userId: number;data: CreateDraftDto}, TContext>, request?: SecondParameter<typeof usersDraftsControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersDraftsControllerCreate>, TError, {userId: number;data: CreateDraftDto}, TContext>((props) => {
        const {userId,data} = props || {};

        return  usersDraftsControllerCreate<TData>(userId,data,requestOptions)
      }, mutationOptions)
    }
    export const usersDraftsControllerFindOne = <TData = DraftDto>(
    userId: number,
    id: number,
 options?: SecondParameter<typeof usersDraftsControllerFindOneMutator>) => {
      return usersDraftsControllerFindOneMutator<TData>(
      {url: `/api/users/${userId}/drafts/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersDraftsControllerFindOneQueryKey = (userId: number,
    id: number,) => [`/api/users/${userId}/drafts/${id}`]

    
export const useUsersDraftsControllerFindOne = <TQueryFnData = DraftDto, TError = unknown, TData = TQueryFnData>(
 userId: number,
    id: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersDraftsControllerFindOne>, TError, TData>, request?: SecondParameter<typeof usersDraftsControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersDraftsControllerFindOneQueryKey(userId,id);

  const query = useQuery<AsyncReturnType<typeof usersDraftsControllerFindOne>, TError, TData>(queryKey, () => usersDraftsControllerFindOne<TQueryFnData>(userId,id, requestOptions), {enabled: !!(userId && id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const usersDraftsControllerUpdate = <TData = DraftDto>(
    userId: number,
    id: number,
    updateDraftDto: UpdateDraftDto,
 options?: SecondParameter<typeof usersDraftsControllerUpdateMutator>) => {
      return usersDraftsControllerUpdateMutator<TData>(
      {url: `/api/users/${userId}/drafts/${id}`, method: 'put',
      data: updateDraftDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersDraftsControllerUpdate = <TData = DraftDto,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersDraftsControllerUpdate>, TError,{userId: number;id: number;data: UpdateDraftDto}, TContext>, request?: SecondParameter<typeof usersDraftsControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersDraftsControllerUpdate>, TError, {userId: number;id: number;data: UpdateDraftDto}, TContext>((props) => {
        const {userId,id,data} = props || {};

        return  usersDraftsControllerUpdate<TData>(userId,id,data,requestOptions)
      }, mutationOptions)
    }
    export const usersDraftsControllerRemove = <TData = unknown>(
    userId: number,
    id: number,
 options?: SecondParameter<typeof usersDraftsControllerRemoveMutator>) => {
      return usersDraftsControllerRemoveMutator<TData>(
      {url: `/api/users/${userId}/drafts/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useUsersDraftsControllerRemove = <TData = unknown,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof usersDraftsControllerRemove>, TError,{userId: number;id: number}, TContext>, request?: SecondParameter<typeof usersDraftsControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<AsyncReturnType<typeof usersDraftsControllerRemove>, TError, {userId: number;id: number}, TContext>((props) => {
        const {userId,id} = props || {};

        return  usersDraftsControllerRemove<TData>(userId,id,requestOptions)
      }, mutationOptions)
    }
    export const usersOwnFilesControllerGetUserFilesMetadata = <TData = FileMetadataDto[]>(
    
 options?: SecondParameter<typeof usersOwnFilesControllerGetUserFilesMetadataMutator>) => {
      return usersOwnFilesControllerGetUserFilesMetadataMutator<TData>(
      {url: `/api/users/me/files`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersOwnFilesControllerGetUserFilesMetadataQueryKey = () => [`/api/users/me/files`]

    
export const useUsersOwnFilesControllerGetUserFilesMetadata = <TQueryFnData = FileMetadataDto[], TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersOwnFilesControllerGetUserFilesMetadata>, TError, TData>, request?: SecondParameter<typeof usersOwnFilesControllerGetUserFilesMetadataMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersOwnFilesControllerGetUserFilesMetadataQueryKey();

  const query = useQuery<AsyncReturnType<typeof usersOwnFilesControllerGetUserFilesMetadata>, TError, TData>(queryKey, () => usersOwnFilesControllerGetUserFilesMetadata<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const usersFilesControllerGetUserFilesMetadata = <TData = FileMetadataDto[]>(
    userId: number,
 options?: SecondParameter<typeof usersFilesControllerGetUserFilesMetadataMutator>) => {
      return usersFilesControllerGetUserFilesMetadataMutator<TData>(
      {url: `/api/users/${userId}/files`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getUsersFilesControllerGetUserFilesMetadataQueryKey = (userId: number,) => [`/api/users/${userId}/files`]

    
export const useUsersFilesControllerGetUserFilesMetadata = <TQueryFnData = FileMetadataDto[], TError = unknown, TData = TQueryFnData>(
 userId: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof usersFilesControllerGetUserFilesMetadata>, TError, TData>, request?: SecondParameter<typeof usersFilesControllerGetUserFilesMetadataMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getUsersFilesControllerGetUserFilesMetadataQueryKey(userId);

  const query = useQuery<AsyncReturnType<typeof usersFilesControllerGetUserFilesMetadata>, TError, TData>(queryKey, () => usersFilesControllerGetUserFilesMetadata<TQueryFnData>(userId, requestOptions), {enabled: !!(userId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

